/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AllFeaturesImport } from './routes/AllFeatures'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const VariableRowHeightLazyImport = createFileRoute('/VariableRowHeight')()
const TreeViewLazyImport = createFileRoute('/TreeView')()
const ScrollToCellLazyImport = createFileRoute('/ScrollToCell')()
const RowsReorderingLazyImport = createFileRoute('/RowsReordering')()
const RowGroupingLazyImport = createFileRoute('/RowGrouping')()
const ResizableGridLazyImport = createFileRoute('/ResizableGrid')()
const RangeSelectionLazyImport = createFileRoute('/RangeSelection')()
const NoRowsLazyImport = createFileRoute('/NoRows')()
const MillionCellsLazyImport = createFileRoute('/MillionCells')()
const MasterDetailLazyImport = createFileRoute('/MasterDetail')()
const InfiniteScrollingLazyImport = createFileRoute('/InfiniteScrolling')()
const HeaderFiltersLazyImport = createFileRoute('/HeaderFilters')()
const CustomizableRenderersLazyImport = createFileRoute(
  '/CustomizableRenderers',
)()
const ContextMenuLazyImport = createFileRoute('/ContextMenu')()
const CommonFeaturesLazyImport = createFileRoute('/CommonFeatures')()
const ColumnsReorderingLazyImport = createFileRoute('/ColumnsReordering')()
const ColumnSpanningLazyImport = createFileRoute('/ColumnSpanning')()
const ColumnGroupingLazyImport = createFileRoute('/ColumnGrouping')()
const CellNavigationLazyImport = createFileRoute('/CellNavigation')()
const AnimationLazyImport = createFileRoute('/Animation')()

// Create/Update Routes

const VariableRowHeightLazyRoute = VariableRowHeightLazyImport.update({
  id: '/VariableRowHeight',
  path: '/VariableRowHeight',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/VariableRowHeight.lazy').then((d) => d.Route),
)

const TreeViewLazyRoute = TreeViewLazyImport.update({
  id: '/TreeView',
  path: '/TreeView',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/TreeView.lazy').then((d) => d.Route))

const ScrollToCellLazyRoute = ScrollToCellLazyImport.update({
  id: '/ScrollToCell',
  path: '/ScrollToCell',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ScrollToCell.lazy').then((d) => d.Route))

const RowsReorderingLazyRoute = RowsReorderingLazyImport.update({
  id: '/RowsReordering',
  path: '/RowsReordering',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/RowsReordering.lazy').then((d) => d.Route),
)

const RowGroupingLazyRoute = RowGroupingLazyImport.update({
  id: '/RowGrouping',
  path: '/RowGrouping',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/RowGrouping.lazy').then((d) => d.Route))

const ResizableGridLazyRoute = ResizableGridLazyImport.update({
  id: '/ResizableGrid',
  path: '/ResizableGrid',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ResizableGrid.lazy').then((d) => d.Route))

const RangeSelectionLazyRoute = RangeSelectionLazyImport.update({
  id: '/RangeSelection',
  path: '/RangeSelection',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/RangeSelection.lazy').then((d) => d.Route),
)

const NoRowsLazyRoute = NoRowsLazyImport.update({
  id: '/NoRows',
  path: '/NoRows',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/NoRows.lazy').then((d) => d.Route))

const MillionCellsLazyRoute = MillionCellsLazyImport.update({
  id: '/MillionCells',
  path: '/MillionCells',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/MillionCells.lazy').then((d) => d.Route))

const MasterDetailLazyRoute = MasterDetailLazyImport.update({
  id: '/MasterDetail',
  path: '/MasterDetail',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/MasterDetail.lazy').then((d) => d.Route))

const InfiniteScrollingLazyRoute = InfiniteScrollingLazyImport.update({
  id: '/InfiniteScrolling',
  path: '/InfiniteScrolling',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/InfiniteScrolling.lazy').then((d) => d.Route),
)

const HeaderFiltersLazyRoute = HeaderFiltersLazyImport.update({
  id: '/HeaderFilters',
  path: '/HeaderFilters',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/HeaderFilters.lazy').then((d) => d.Route))

const CustomizableRenderersLazyRoute = CustomizableRenderersLazyImport.update({
  id: '/CustomizableRenderers',
  path: '/CustomizableRenderers',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/CustomizableRenderers.lazy').then((d) => d.Route),
)

const ContextMenuLazyRoute = ContextMenuLazyImport.update({
  id: '/ContextMenu',
  path: '/ContextMenu',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/ContextMenu.lazy').then((d) => d.Route))

const CommonFeaturesLazyRoute = CommonFeaturesLazyImport.update({
  id: '/CommonFeatures',
  path: '/CommonFeatures',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/CommonFeatures.lazy').then((d) => d.Route),
)

const ColumnsReorderingLazyRoute = ColumnsReorderingLazyImport.update({
  id: '/ColumnsReordering',
  path: '/ColumnsReordering',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ColumnsReordering.lazy').then((d) => d.Route),
)

const ColumnSpanningLazyRoute = ColumnSpanningLazyImport.update({
  id: '/ColumnSpanning',
  path: '/ColumnSpanning',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ColumnSpanning.lazy').then((d) => d.Route),
)

const ColumnGroupingLazyRoute = ColumnGroupingLazyImport.update({
  id: '/ColumnGrouping',
  path: '/ColumnGrouping',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ColumnGrouping.lazy').then((d) => d.Route),
)

const CellNavigationLazyRoute = CellNavigationLazyImport.update({
  id: '/CellNavigation',
  path: '/CellNavigation',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/CellNavigation.lazy').then((d) => d.Route),
)

const AnimationLazyRoute = AnimationLazyImport.update({
  id: '/Animation',
  path: '/Animation',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/Animation.lazy').then((d) => d.Route))

const AllFeaturesRoute = AllFeaturesImport.update({
  id: '/AllFeatures',
  path: '/AllFeatures',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/AllFeatures.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/AllFeatures': {
      id: '/AllFeatures'
      path: '/AllFeatures'
      fullPath: '/AllFeatures'
      preLoaderRoute: typeof AllFeaturesImport
      parentRoute: typeof rootRoute
    }
    '/Animation': {
      id: '/Animation'
      path: '/Animation'
      fullPath: '/Animation'
      preLoaderRoute: typeof AnimationLazyImport
      parentRoute: typeof rootRoute
    }
    '/CellNavigation': {
      id: '/CellNavigation'
      path: '/CellNavigation'
      fullPath: '/CellNavigation'
      preLoaderRoute: typeof CellNavigationLazyImport
      parentRoute: typeof rootRoute
    }
    '/ColumnGrouping': {
      id: '/ColumnGrouping'
      path: '/ColumnGrouping'
      fullPath: '/ColumnGrouping'
      preLoaderRoute: typeof ColumnGroupingLazyImport
      parentRoute: typeof rootRoute
    }
    '/ColumnSpanning': {
      id: '/ColumnSpanning'
      path: '/ColumnSpanning'
      fullPath: '/ColumnSpanning'
      preLoaderRoute: typeof ColumnSpanningLazyImport
      parentRoute: typeof rootRoute
    }
    '/ColumnsReordering': {
      id: '/ColumnsReordering'
      path: '/ColumnsReordering'
      fullPath: '/ColumnsReordering'
      preLoaderRoute: typeof ColumnsReorderingLazyImport
      parentRoute: typeof rootRoute
    }
    '/CommonFeatures': {
      id: '/CommonFeatures'
      path: '/CommonFeatures'
      fullPath: '/CommonFeatures'
      preLoaderRoute: typeof CommonFeaturesLazyImport
      parentRoute: typeof rootRoute
    }
    '/ContextMenu': {
      id: '/ContextMenu'
      path: '/ContextMenu'
      fullPath: '/ContextMenu'
      preLoaderRoute: typeof ContextMenuLazyImport
      parentRoute: typeof rootRoute
    }
    '/CustomizableRenderers': {
      id: '/CustomizableRenderers'
      path: '/CustomizableRenderers'
      fullPath: '/CustomizableRenderers'
      preLoaderRoute: typeof CustomizableRenderersLazyImport
      parentRoute: typeof rootRoute
    }
    '/HeaderFilters': {
      id: '/HeaderFilters'
      path: '/HeaderFilters'
      fullPath: '/HeaderFilters'
      preLoaderRoute: typeof HeaderFiltersLazyImport
      parentRoute: typeof rootRoute
    }
    '/InfiniteScrolling': {
      id: '/InfiniteScrolling'
      path: '/InfiniteScrolling'
      fullPath: '/InfiniteScrolling'
      preLoaderRoute: typeof InfiniteScrollingLazyImport
      parentRoute: typeof rootRoute
    }
    '/MasterDetail': {
      id: '/MasterDetail'
      path: '/MasterDetail'
      fullPath: '/MasterDetail'
      preLoaderRoute: typeof MasterDetailLazyImport
      parentRoute: typeof rootRoute
    }
    '/MillionCells': {
      id: '/MillionCells'
      path: '/MillionCells'
      fullPath: '/MillionCells'
      preLoaderRoute: typeof MillionCellsLazyImport
      parentRoute: typeof rootRoute
    }
    '/NoRows': {
      id: '/NoRows'
      path: '/NoRows'
      fullPath: '/NoRows'
      preLoaderRoute: typeof NoRowsLazyImport
      parentRoute: typeof rootRoute
    }
    '/RangeSelection': {
      id: '/RangeSelection'
      path: '/RangeSelection'
      fullPath: '/RangeSelection'
      preLoaderRoute: typeof RangeSelectionLazyImport
      parentRoute: typeof rootRoute
    }
    '/ResizableGrid': {
      id: '/ResizableGrid'
      path: '/ResizableGrid'
      fullPath: '/ResizableGrid'
      preLoaderRoute: typeof ResizableGridLazyImport
      parentRoute: typeof rootRoute
    }
    '/RowGrouping': {
      id: '/RowGrouping'
      path: '/RowGrouping'
      fullPath: '/RowGrouping'
      preLoaderRoute: typeof RowGroupingLazyImport
      parentRoute: typeof rootRoute
    }
    '/RowsReordering': {
      id: '/RowsReordering'
      path: '/RowsReordering'
      fullPath: '/RowsReordering'
      preLoaderRoute: typeof RowsReorderingLazyImport
      parentRoute: typeof rootRoute
    }
    '/ScrollToCell': {
      id: '/ScrollToCell'
      path: '/ScrollToCell'
      fullPath: '/ScrollToCell'
      preLoaderRoute: typeof ScrollToCellLazyImport
      parentRoute: typeof rootRoute
    }
    '/TreeView': {
      id: '/TreeView'
      path: '/TreeView'
      fullPath: '/TreeView'
      preLoaderRoute: typeof TreeViewLazyImport
      parentRoute: typeof rootRoute
    }
    '/VariableRowHeight': {
      id: '/VariableRowHeight'
      path: '/VariableRowHeight'
      fullPath: '/VariableRowHeight'
      preLoaderRoute: typeof VariableRowHeightLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationLazyRoute
  '/CellNavigation': typeof CellNavigationLazyRoute
  '/ColumnGrouping': typeof ColumnGroupingLazyRoute
  '/ColumnSpanning': typeof ColumnSpanningLazyRoute
  '/ColumnsReordering': typeof ColumnsReorderingLazyRoute
  '/CommonFeatures': typeof CommonFeaturesLazyRoute
  '/ContextMenu': typeof ContextMenuLazyRoute
  '/CustomizableRenderers': typeof CustomizableRenderersLazyRoute
  '/HeaderFilters': typeof HeaderFiltersLazyRoute
  '/InfiniteScrolling': typeof InfiniteScrollingLazyRoute
  '/MasterDetail': typeof MasterDetailLazyRoute
  '/MillionCells': typeof MillionCellsLazyRoute
  '/NoRows': typeof NoRowsLazyRoute
  '/RangeSelection': typeof RangeSelectionLazyRoute
  '/ResizableGrid': typeof ResizableGridLazyRoute
  '/RowGrouping': typeof RowGroupingLazyRoute
  '/RowsReordering': typeof RowsReorderingLazyRoute
  '/ScrollToCell': typeof ScrollToCellLazyRoute
  '/TreeView': typeof TreeViewLazyRoute
  '/VariableRowHeight': typeof VariableRowHeightLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationLazyRoute
  '/CellNavigation': typeof CellNavigationLazyRoute
  '/ColumnGrouping': typeof ColumnGroupingLazyRoute
  '/ColumnSpanning': typeof ColumnSpanningLazyRoute
  '/ColumnsReordering': typeof ColumnsReorderingLazyRoute
  '/CommonFeatures': typeof CommonFeaturesLazyRoute
  '/ContextMenu': typeof ContextMenuLazyRoute
  '/CustomizableRenderers': typeof CustomizableRenderersLazyRoute
  '/HeaderFilters': typeof HeaderFiltersLazyRoute
  '/InfiniteScrolling': typeof InfiniteScrollingLazyRoute
  '/MasterDetail': typeof MasterDetailLazyRoute
  '/MillionCells': typeof MillionCellsLazyRoute
  '/NoRows': typeof NoRowsLazyRoute
  '/RangeSelection': typeof RangeSelectionLazyRoute
  '/ResizableGrid': typeof ResizableGridLazyRoute
  '/RowGrouping': typeof RowGroupingLazyRoute
  '/RowsReordering': typeof RowsReorderingLazyRoute
  '/ScrollToCell': typeof ScrollToCellLazyRoute
  '/TreeView': typeof TreeViewLazyRoute
  '/VariableRowHeight': typeof VariableRowHeightLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationLazyRoute
  '/CellNavigation': typeof CellNavigationLazyRoute
  '/ColumnGrouping': typeof ColumnGroupingLazyRoute
  '/ColumnSpanning': typeof ColumnSpanningLazyRoute
  '/ColumnsReordering': typeof ColumnsReorderingLazyRoute
  '/CommonFeatures': typeof CommonFeaturesLazyRoute
  '/ContextMenu': typeof ContextMenuLazyRoute
  '/CustomizableRenderers': typeof CustomizableRenderersLazyRoute
  '/HeaderFilters': typeof HeaderFiltersLazyRoute
  '/InfiniteScrolling': typeof InfiniteScrollingLazyRoute
  '/MasterDetail': typeof MasterDetailLazyRoute
  '/MillionCells': typeof MillionCellsLazyRoute
  '/NoRows': typeof NoRowsLazyRoute
  '/RangeSelection': typeof RangeSelectionLazyRoute
  '/ResizableGrid': typeof ResizableGridLazyRoute
  '/RowGrouping': typeof RowGroupingLazyRoute
  '/RowsReordering': typeof RowsReorderingLazyRoute
  '/ScrollToCell': typeof ScrollToCellLazyRoute
  '/TreeView': typeof TreeViewLazyRoute
  '/VariableRowHeight': typeof VariableRowHeightLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/RangeSelection'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/RangeSelection'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  id:
    | '__root__'
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/RangeSelection'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllFeaturesRoute: typeof AllFeaturesRoute
  AnimationLazyRoute: typeof AnimationLazyRoute
  CellNavigationLazyRoute: typeof CellNavigationLazyRoute
  ColumnGroupingLazyRoute: typeof ColumnGroupingLazyRoute
  ColumnSpanningLazyRoute: typeof ColumnSpanningLazyRoute
  ColumnsReorderingLazyRoute: typeof ColumnsReorderingLazyRoute
  CommonFeaturesLazyRoute: typeof CommonFeaturesLazyRoute
  ContextMenuLazyRoute: typeof ContextMenuLazyRoute
  CustomizableRenderersLazyRoute: typeof CustomizableRenderersLazyRoute
  HeaderFiltersLazyRoute: typeof HeaderFiltersLazyRoute
  InfiniteScrollingLazyRoute: typeof InfiniteScrollingLazyRoute
  MasterDetailLazyRoute: typeof MasterDetailLazyRoute
  MillionCellsLazyRoute: typeof MillionCellsLazyRoute
  NoRowsLazyRoute: typeof NoRowsLazyRoute
  RangeSelectionLazyRoute: typeof RangeSelectionLazyRoute
  ResizableGridLazyRoute: typeof ResizableGridLazyRoute
  RowGroupingLazyRoute: typeof RowGroupingLazyRoute
  RowsReorderingLazyRoute: typeof RowsReorderingLazyRoute
  ScrollToCellLazyRoute: typeof ScrollToCellLazyRoute
  TreeViewLazyRoute: typeof TreeViewLazyRoute
  VariableRowHeightLazyRoute: typeof VariableRowHeightLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllFeaturesRoute: AllFeaturesRoute,
  AnimationLazyRoute: AnimationLazyRoute,
  CellNavigationLazyRoute: CellNavigationLazyRoute,
  ColumnGroupingLazyRoute: ColumnGroupingLazyRoute,
  ColumnSpanningLazyRoute: ColumnSpanningLazyRoute,
  ColumnsReorderingLazyRoute: ColumnsReorderingLazyRoute,
  CommonFeaturesLazyRoute: CommonFeaturesLazyRoute,
  ContextMenuLazyRoute: ContextMenuLazyRoute,
  CustomizableRenderersLazyRoute: CustomizableRenderersLazyRoute,
  HeaderFiltersLazyRoute: HeaderFiltersLazyRoute,
  InfiniteScrollingLazyRoute: InfiniteScrollingLazyRoute,
  MasterDetailLazyRoute: MasterDetailLazyRoute,
  MillionCellsLazyRoute: MillionCellsLazyRoute,
  NoRowsLazyRoute: NoRowsLazyRoute,
  RangeSelectionLazyRoute: RangeSelectionLazyRoute,
  ResizableGridLazyRoute: ResizableGridLazyRoute,
  RowGroupingLazyRoute: RowGroupingLazyRoute,
  RowsReorderingLazyRoute: RowsReorderingLazyRoute,
  ScrollToCellLazyRoute: ScrollToCellLazyRoute,
  TreeViewLazyRoute: TreeViewLazyRoute,
  VariableRowHeightLazyRoute: VariableRowHeightLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/AllFeatures",
        "/Animation",
        "/CellNavigation",
        "/ColumnGrouping",
        "/ColumnSpanning",
        "/ColumnsReordering",
        "/CommonFeatures",
        "/ContextMenu",
        "/CustomizableRenderers",
        "/HeaderFilters",
        "/InfiniteScrolling",
        "/MasterDetail",
        "/MillionCells",
        "/NoRows",
        "/RangeSelection",
        "/ResizableGrid",
        "/RowGrouping",
        "/RowsReordering",
        "/ScrollToCell",
        "/TreeView",
        "/VariableRowHeight"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/AllFeatures": {
      "filePath": "AllFeatures.tsx"
    },
    "/Animation": {
      "filePath": "Animation.lazy.tsx"
    },
    "/CellNavigation": {
      "filePath": "CellNavigation.lazy.tsx"
    },
    "/ColumnGrouping": {
      "filePath": "ColumnGrouping.lazy.tsx"
    },
    "/ColumnSpanning": {
      "filePath": "ColumnSpanning.lazy.tsx"
    },
    "/ColumnsReordering": {
      "filePath": "ColumnsReordering.lazy.tsx"
    },
    "/CommonFeatures": {
      "filePath": "CommonFeatures.lazy.tsx"
    },
    "/ContextMenu": {
      "filePath": "ContextMenu.lazy.tsx"
    },
    "/CustomizableRenderers": {
      "filePath": "CustomizableRenderers.lazy.tsx"
    },
    "/HeaderFilters": {
      "filePath": "HeaderFilters.lazy.tsx"
    },
    "/InfiniteScrolling": {
      "filePath": "InfiniteScrolling.lazy.tsx"
    },
    "/MasterDetail": {
      "filePath": "MasterDetail.lazy.tsx"
    },
    "/MillionCells": {
      "filePath": "MillionCells.lazy.tsx"
    },
    "/NoRows": {
      "filePath": "NoRows.lazy.tsx"
    },
    "/RangeSelection": {
      "filePath": "RangeSelection.lazy.tsx"
    },
    "/ResizableGrid": {
      "filePath": "ResizableGrid.lazy.tsx"
    },
    "/RowGrouping": {
      "filePath": "RowGrouping.lazy.tsx"
    },
    "/RowsReordering": {
      "filePath": "RowsReordering.lazy.tsx"
    },
    "/ScrollToCell": {
      "filePath": "ScrollToCell.lazy.tsx"
    },
    "/TreeView": {
      "filePath": "TreeView.lazy.tsx"
    },
    "/VariableRowHeight": {
      "filePath": "VariableRowHeight.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
